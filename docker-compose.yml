version: '3.8'

services:
  postgres_source:
    image: postgres:12.19
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    ports:
      - "5433:5432"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_replication_slots=4"
      - "-c"
      - "wal_sender_timeout=0"
      - "-c"
      - "wal_writer_delay=1ms"
      - "-c"
      - "wal_writer_flush_after=32kB"
      - "-c"
      - "max_wal_size=4GB"
    volumes:
      - pg_source_data:/var/lib/postgresql/data
      - ./scripts/init_replication.sh:/docker-entrypoint-initdb.d/init_replication.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_source_ro_1:
    image: postgres:12.19
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      PGPASSWORD: testpass
    ports:
      - "5435:5432"
    volumes:
      - pg_source_ro_1_data:/var/lib/postgresql/data
    depends_on:
      postgres_source:
        condition: service_healthy
    command: |
      bash -c '
      pg_basebackup -h postgres_source -p 5432 -U testuser -D /var/lib/postgresql/data -Fp -Xs -P -R
      echo "hot_standby = on" >> /var/lib/postgresql/data/postgresql.auto.conf
      exec docker-entrypoint.sh postgres
      '

  postgres_source_ro_2:
    image: postgres:12.19
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      PGPASSWORD: testpass
    ports:
      - "5436:5432"
    volumes:
      - pg_source_ro_2_data:/var/lib/postgresql/data
    depends_on:
      postgres_source:
        condition: service_healthy
    command: |
      bash -c '
      pg_basebackup -h postgres_source -p 5432 -U testuser -D /var/lib/postgresql/data -Fp -Xs -P -R
      echo "hot_standby = on" >> /var/lib/postgresql/data/postgresql.auto.conf
      exec docker-entrypoint.sh postgres
      '


  postgres_target:
    image: postgres:12.19
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    ports:
      - "5434:5432"
    volumes:
      - pg_target_data:/var/lib/postgresql/data
      - ./scripts/upgrade_pg.sh:/upgrade_pg.sh  # Mount upgrade script
    entrypoint: []
    command: |
      bash -c "
      docker-entrypoint.sh postgres \
        -c 'wal_level=logical' \
        -c 'max_wal_senders=10' \
        -c 'max_replication_slots=4' \
        -c 'wal_sender_timeout=0' \
        -c 'wal_writer_delay=1ms' \
        -c 'wal_writer_flush_after=32kB' \
        -c 'max_wal_size=4GB'  &
      while true; do sleep 86400; done
      "

  postgres_target_ro_1:
    image: postgres:15
    user: postgres
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      PGPASSWORD: testpass
    ports:
      - "5437:5432"
    volumes:
      - pg_target_ro_1_data:/var/lib/postgresql/data
    depends_on:
      - postgres_target
    command: |
      bash -c '
      while true; do
        echo "Running version check..."
        if psql --host=postgres_target --port=5432 --username=testuser --dbname=testdb --no-align --tuples-only --command="SELECT version()" | grep -q "PostgreSQL 15"; then
          echo "PostgreSQL 15 detected, starting replication..."
          pg_basebackup -h postgres_target -p 5432 -U testuser -D /var/lib/postgresql/data -Fp -Xs -P -R
          echo "hot_standby = on" >> /var/lib/postgresql/data/postgresql.auto.conf
          exec docker-entrypoint.sh postgres
        fi
        echo "Not PostgreSQL 15, waiting 5 seconds..."
        sleep 5
      done'


  postgres_target_ro_2:
    image: postgres:15
    user: postgres
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      PGPASSWORD: testpass
    ports:
      - "5438:5432"
    volumes:
      - pg_target_ro_2_data:/var/lib/postgresql/data
    depends_on:
      - postgres_target
    command: |
      bash -c '
      while true; do
        echo "Running version check..."
        if psql --host=postgres_target --port=5432 --username=testuser --dbname=testdb --no-align --tuples-only --command="SELECT version()" | grep -q "PostgreSQL 15"; then
          echo "PostgreSQL 15 detected, starting replication..."
          pg_basebackup -h postgres_target -p 5432 -U testuser -D /var/lib/postgresql/data -Fp -Xs -P -R
          echo "hot_standby = on" >> /var/lib/postgresql/data/postgresql.auto.conf
          exec docker-entrypoint.sh postgres
        fi
        echo "Not PostgreSQL 15, waiting 5 seconds..."
        sleep 5
      done'

  pgbouncer:
    image: edoburu/pgbouncer:v1.23.1-p2
    volumes:
      - ./configs/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./configs/pgbouncer_new.ini:/etc/pgbouncer/pgbouncer_new.ini
      - ./configs/userlist.txt:/etc/pgbouncer/userlist.txt
    command: ["/usr/bin/pgbouncer", "/etc/pgbouncer/pgbouncer.ini"]
    ports:
      - "6433:6432"
    depends_on:
      postgres_source:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1000000
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1
      KAFKA_LOG_FLUSH_INTERVAL_MS: 100

  kafka-connect-cdc:
    image: debezium/connect:2.7.2.Final
    depends_on:
      - kafka
      - postgres_source
      - postgres_target
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs_cdc
      OFFSET_STORAGE_TOPIC: connect_offsets_cdc
      STATUS_STORAGE_TOPIC: connect_statuses_cdc
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"

  kafka-connect-outbox:
    image: debezium/connect:2.7.2.Final
    depends_on:
      - kafka
      - postgres_source
      - postgres_target
    ports:
      - "8084:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 2  # Different group ID
      CONFIG_STORAGE_TOPIC: connect_configs_outbx
      OFFSET_STORAGE_TOPIC: connect_offsets_outbx
      STATUS_STORAGE_TOPIC: connect_statuses_outbx
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"

  elixir_test_app:
    build:
      context: ./elixir_app
      dockerfile: ../docker/Dockerfile
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      PGBOUNCER_HOST: pgbouncer
      PGBOUNCER_PORT: 6432
    depends_on:
      - pgbouncer

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.6.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'kafka-connect-cdc:8083'
      CONTROL_CENTER_CONNECT_CONNECT-SECONDARY_CLUSTER: 'kafka-connect-outbox:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

volumes:
  pg_source_data:
  pg_source_ro_1_data:
  pg_source_ro_2_data:
  pg_target_ro_1_data:
  pg_target_ro_2_data:
  pg_target_data: